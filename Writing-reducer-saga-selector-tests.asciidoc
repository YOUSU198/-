To minimize re-writing of testing data, saga and selector tests should be in the same directories as their related reducers. Each reducer test should contain an `expectedState` object that contains the expected state after a certain action to be tested against the reducer. 

E.g.
```ts
export const expectedState = {
  initialState: {},
  addFirstCustomNetwork: { [firstCustomNetworkId]: firstCustomNetworkConfig },
  addSecondCustomNetwork: {
    [firstCustomNetworkId]: firstCustomNetworkConfig,
    [secondCustomNetworkId]: secondCustomNetworkConfig
  },
  removeFirstCustomNetwork: { [secondCustomNetworkId]: secondCustomNetworkConfig }
};
```
In addition to the `expectedState` object, an additional object of `actions` should be made contains actions that should respond to each expected state to be tested against.

```ts
export const actions = {
  addFirstCustomNetwork: addCustomNetwork({
    id: firstCustomNetworkId,
    config: firstCustomNetworkConfig
  }),
  addSecondCustomNetwork: addCustomNetwork({
    config: secondCustomNetworkConfig,
    id: secondCustomNetworkId
  }),
  removeFirstCustomNetwork: removeCustomNetwork({ id: firstCustomNetworkId })
};
```

By exporting `actions` and `expectedState` objects from each reducer, the full state and all possible actions can be tested against for both reducers, sagas, and selectors without testing data redundancy.



